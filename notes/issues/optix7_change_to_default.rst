optix7_change_to_default
===========================

From :doc:`gxs_high_level_translation_of_U4VolumeMaker_Geant4_geometry`

DONE : add u4 gx cx pkgs to the standard build set
---------------------------------------------------

::

     274 om-subs--all(){ cat << EOS
     275 # to update this list : opticks-deps --subdirs
     276 # the names must be the case correct directory names 
     277 okconf
     278 sysrap
     279 boostrap
     280 npy
     281 #yoctoglrap
     282 optickscore
     283 ggeo
     284 #assimprap
     285 #openmeshrap
     286 opticksgeo
     287 cudarap
     288 thrustrap
     289 optixrap
     290 okop
     291 oglrap
     292 opticksgl
     293 ok
     294 extg4
     295 cfg4
     296 okg4
     297 g4ok
     298 integration
     299 ana
     300 analytic
     301 bin
     302 CSG
     303 CSG_GGeo
     304 GeoChain
     305 qudarap
     306 CSGOptiX
     307 u4
     308 g4cx
     309 EOS
     310 }


DONE : switch to OptiX 7 as standard
---------------------------------------------------------------------------------------

Need to change the standard OPTICKS_OPTIX_PREFIX to be the one for 7 so no longer need to b7::

    epsilon:issues blyth$ t opticks-build7
    opticks-build7 () 
    { 
        export OPTICKS_HOME=$(opticks-home);
        opticks-set-optix-prefix 7;     ## sets OPTICKS_OPTIX_PREFIX
        opticks-chkvar OPTICKS_PREFIX OPTICKS_HOME OPTICKS_OPTIX_PREFIX;
        [ $? -ne 0 ] && echo $msg checkvar FAIL && return 1;
        cd_func $(opticks-home)/CSGOptiX;
        local sdir=$(pwd);
        local name=$(basename $sdir);
        local bdir=/tmp/$USER/opticks/${name}.build;
        rm -rf $bdir && mkdir -p $bdir;
        [ ! -d $bdir ] && exit 1;
        cd_func $bdir && pwd;
        cmake $sdir -DCMAKE_BUILD_TYPE=Debug -DOPTICKS_PREFIX=${OPTICKS_PREFIX} -DCMAKE_MODULE_PATH=${OPTICKS_HOME}/cmake/Modules -DCMAKE_INSTALL_PREFIX=${OPTICKS_PREFIX};
        [ $? -ne 0 ] && echo $msg conf FAIL && return 1;
        make;
        [ $? -ne 0 ] && echo $msg make FAIL && return 2;
        make install;
        [ $? -ne 0 ] && echo $msg install FAIL && return 3;
        opticks-set-optix-prefix 6;
        cd_func $sdir && pwd;
        return 0
    }

::

    epsilon:opticks blyth$ t oe-env
    oe-env () 
    { 
        olocal-;
        opticks-;
        source $OPTICKS_PREFIX/bin/opticks-setup.sh 1>&2
    }


The envvars from the build get get enshrined into the $OPTICKS_PREFIX/bin/opticks-setup.sh::

     01 #!/bin/bash
      2 #  
      3 #    D O   N O T   E D I T 
      4 #
      5 # generated by opticks-setup-generate
      6 #
      7 # opticks-setup-hdr- Sun Apr 18 17:32:45 BST 2021
      8 
      9 NAME=$(basename $BASH_SOURCE)
     10 MSG="=== $NAME :"
     11 
     12 if [ "$BASH_SOURCE" == "$0" ]; then
     13    echo $MSG ERROR the $BASH_SOURCE file needs to be sourced not executed
     14    exit 1
     15    # normally would return from sourced script but here have detected are being executed so exit 
     16 fi
     17 
     18 # opticks-setup-prefix- 
     19 
     20 # mandatory envvars from buildenv propagated into userenv via this setup
     21 export OPTICKS_PREFIX=/usr/local/opticks
     22 export OPTICKS_CUDA_PREFIX=/usr/local/cuda
     23 export OPTICKS_OPTIX_PREFIX=/usr/local/optix
     24 
     25 HERE_OPTICKS_PREFIX=$(dirname $(dirname $BASH_SOURCE))


The build envvars on laptop come from ~/.opticks_config::

     56 export OPTICKS_CUDA_PREFIX=/usr/local/cuda
     57 export OPTICKS_OPTIX_PREFIX=/usr/local/optix
     58 export OPTICKS_COMPUTE_CAPABILITY=30
     59 
     60 export OPTICKS_OPTIX5_PREFIX=/usr/local/optix
     61 export OPTICKS_OPTIX7_PREFIX=/Developer/OptiX_700

What about the workstation env, which is mixed up with junoenv ?


::

    N[blyth@localhost opticks]$ t jre
    jre () 
    { 
        j-runtime-env;
        jo;
        if [ -n "$OPTICKS_PREFIX" ]; then
            : TODO add these settings to standard environment;
            opticks-;
            export PYTHONPATH=$PYTHONPATH:$JUNOTOP;
        fi
    }

    N[blyth@localhost opticks]$ t j-runtime-env
    j-runtime-env () 
    { 
        : setup the runtime environment CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, LD_LIBRARY_PATH, PATH, MANPATH;
        local msg="=== $FUNCNAME: ";
        local var=J_RUNTIME_ENV;
        if [ -n "${!var}" ]; then
            echo $msg skip as $var:${!var} use jre- or j-runtime-env- to force it;
        else
            export $var=1;
            j-runtime-env-;
        fi
    }

    N[blyth@localhost opticks]$ t j-runtime-env-
    j-runtime-env- () 
    { 
        : note that CMAKE_PREFIX_PATH and MANPATH keep appending on repeated running but the others dont;
        local msg="=== $FUNCNAME: ";
        echo $msg;
        source $JUNOTOP/bashrc.sh;
        local sniper_cmt_setup=$JUNOTOP/sniper/SniperRelease/cmt/setup.sh;
        if [ -f $sniper_cmt_setup ]; then
            CMTEXTRATAGS= source $sniper_cmt_setup;
            source $JUNOTOP/offline/JunoRelease/cmt/setup.sh;
        else
            source $JUNOTOP/sniper/InstallArea/bashrc;
            source $JUNOTOP/mt.sniper/InstallArea/bashrc;
            source $JUNOTOP/offline/InstallArea/setup.sh;
        fi;
        echo $msg
    }



    N[blyth@localhost opticks]$ cat $JUNOTOP/bashrc.sh | grep opticks
    source /data/blyth/junotop/ExternalLibs/opticks/head/bashrc # Wed Mar 2 22:17:34 CST 2022

    N[blyth@localhost opticks]$ cat  /data/blyth/junotop/ExternalLibs/opticks/head/bashrc

    if [ -s "/data/blyth/junotop/ExternalLibs/opticks/head/bin/opticks-setup.sh" ]; then 

        # get CMTEXTRATAGS to contain the string opticks switching on WITH_G4OPTICKS macro in offline compilation
        if [ -z "$CMTEXTRATAGS" ]; then   # not yet defined
            CMTEXTRATAGS="opticks"
        elif [ "${CMTEXTRATAGS/opticks}" == "${CMTEXTRATAGS}" ]; then  # defined but without opticks
            CMTEXTRATAGS=opticks:opticks
        fi 
        export CMTEXTRATAGS

        if [ -n "$VERBOSE" ]; then 
           source /data/blyth/junotop/ExternalLibs/opticks/head/bin/opticks-setup.sh 
        else
           source /data/blyth/junotop/ExternalLibs/opticks/head/bin/opticks-setup.sh > /dev/null
        fi  

        opticks-(){ . /data/blyth/junotop/opticks/opticks.bash && opticks-env  ; }

    else
        if [ -n "$VERBOSE" ]; then 
            echo script /data/blyth/junotop/ExternalLibs/opticks/head/bin/opticks-setup.sh does not exist 
        fi
    fi 


::

    N[blyth@localhost opticks]$ cat /data/blyth/junotop/ExternalLibs/opticks/head/bin/opticks-setup.sh
    #!/bin/bash
    #  
    #    D O   N O T   E D I T 
    #
    # generated by opticks-setup-generate
    #
    # opticks-setup-hdr- Mon Dec  6 20:48:22 CST 2021

    NAME=$(basename $BASH_SOURCE)
    MSG="=== $NAME :" 

    if [ "$BASH_SOURCE" == "$0" ]; then
       echo $MSG ERROR the $BASH_SOURCE file needs to be sourced not executed
       exit 1   
       # normally would return from sourced script but here have detected are being executed so exit 
    fi 

    # opticks-setup-prefix- 

    # mandatory envvars from buildenv propagated into userenv via this setup
    export OPTICKS_PREFIX=/data/blyth/junotop/ExternalLibs/opticks/head
    export OPTICKS_CUDA_PREFIX=/usr/local/cuda
    export OPTICKS_OPTIX_PREFIX=/home/blyth/local/opticks/externals/OptiX_650




HMM changing the 650 to 700 in the above not enough to get the build to switch::

    == opticks-setup-       skip     append    CMAKE_PREFIX_PATH /home/blyth/local/opticks/externals/OptiX_700
    === opticks-setup-      nodir     append      PKG_CONFIG_PATH /data/blyth/junotop/ExternalLibs/opticks/head/lib/pkgconfig
    === opticks-setup-       skip     append      PKG_CONFIG_PATH /data/blyth/junotop/ExternalLibs/opticks/head/lib64/pkgconfig
    === opticks-setup-       skip     append      PKG_CONFIG_PATH /data/blyth/junotop/ExternalLibs/opticks/head/externals/lib/pkgconfig
    === opticks-setup-       skip     append      PKG_CONFIG_PATH /data/blyth/junotop/ExternalLibs/opticks/head/externals/lib64/pkgconfig
    === opticks-setup-       skip     append      LD_LIBRARY_PATH /data/blyth/junotop/ExternalLibs/opticks/head/lib
    === opticks-setup-       skip     append      LD_LIBRARY_PATH /data/blyth/junotop/ExternalLibs/opticks/head/lib64
    === opticks-setup-       skip     append      LD_LIBRARY_PATH /data/blyth/junotop/ExternalLibs/opticks/head/externals/lib
    === opticks-setup-       skip     append      LD_LIBRARY_PATH /data/blyth/junotop/ExternalLibs/opticks/head/externals/lib64
    === opticks-setup-      nodir     append      LD_LIBRARY_PATH /usr/local/cuda/lib
    === opticks-setup-       skip     append      LD_LIBRARY_PATH /usr/local/cuda/lib64
    === opticks-setup-      nodir     append      LD_LIBRARY_PATH /home/blyth/local/opticks/externals/OptiX_700/lib
    === opticks-setup-      nodir     append      LD_LIBRARY_PATH /home/blyth/local/opticks/externals/OptiX_700/lib64
    === om-make-one : CSGOptiX        /data/blyth/junotop/opticks/CSGOptiX                         /data/blyth/junotop/ExternalLibs/opticks/head/build/CSGOptiX 
    [  8%] Building NVCC ptx file CSGOptiX_generated_CSGOptiX6.cu.ptx
    [  8%] Building NVCC ptx file CSGOptiX_generated_CSGOptiX6geo.cu.ptx
    [ 33%] Built target CSGOptiX
    [ 75%] Built target CSGOptiXRenderTest
    [ 75%] Built target CSGOptiXVersionTest
    [ 75%] Built target CSGOptiXVersion
    [ 75%] Built target CSGOptiXSimulateTest


* the nodir is correct there is no lib just headers 

::

     12 set(OpticksOptiX_VERBOSE ON)
     13 find_package(OpticksOptiX REQUIRED MODULE)



::

    N[blyth@localhost CSGOptiX]$ ini
    # mo .bashrc VIP_MODE:non N : plain environment for debug CMTEXTRATAGS:
    N[blyth@localhost CSGOptiX]$ opticks-setup-generate
    === opticks-check-compute-capability : OPTICKS_COMPUTE_CAPABILITY 70 : looking good it is an integer expression of 30 or more
    === opticks-setup-generate : writing /data/blyth/junotop/ExternalLibs/opticks/head/bin/opticks-setup.sh
    === opticks-setup-generate : post opticks-setup-hdr- rc 0
    === opticks-setup-generate : post opticks-setup-geant4- rc 0
    === opticks-externals-setup
    === opticks-ext-setup : bcm
    === opticks-ext-setup : glm
    === opticks-ext-setup : glfw
    === opticks-ext-setup : glew
    === opticks-ext-setup : gleq
    === opticks-ext-setup : imgui
    === opticks-ext-setup : plog
    === opticks-ext-setup : opticksaux
    === opticks-ext-setup : nljson
    === opticks-setup-generate : post opticks-externals-setup rc 0
    === opticks-preqs-setup
    === opticks-ext-setup : cuda
    === opticks-ext-setup : optix
    === opticks-setup-generate : post opticks-preqs-setup rc 0
    N[blyth@localhost CSGOptiX]$ 


Manage to get both in CMAKE_PREFIX_PATH::

    /data/blyth/junotop/ExternalLibs/opticks/head
    /data/blyth/junotop/ExternalLibs/opticks/head/externals
    /home/blyth/local/opticks/externals/OptiX_650
    /home/blyth/local/opticks/externals/OptiX_700


To make the switch of OptiX versions need to:

1. start new session to prevent having mixed CMAKE_PREFIX_PATH
2. om-clean om-conf om : clear the old CMake config 
3. Also needed to clean gx to prevent it being stuck with 6::

    N[blyth@localhost g4cx]$ ./gxs.sh 
    G4CXSimulateTest: error while loading shared libraries: liboptix.so.6.5.0: cannot open shared object file: No such file or directory
    ./gxs.sh run error



DONE : removed a bunch of old packages from the standard build list
----------------------------------------------------------------------

::

    epsilon:CSGOptiX blyth$ om-subs--all
    # to update this list : opticks-deps --subdirs
    # the names must be the case correct directory names 
    okconf
    sysrap
    boostrap
    npy
    optickscore
    ggeo
    #opticksgeo
    #cudarap
    #thrustrap
    #optixrap
    #okop
    #oglrap
    #opticksgl
    #ok
    extg4
    #cfg4
    #okg4
    #g4ok
    #integration
    ana
    analytic
    bin
    CSG
    CSG_GGeo
    GeoChain
    qudarap
    u4
    CSGOptiX
    g4cx
    epsilon:CSGOptiX blyth$ 


The remainder that I want to eliminate will be a lot harder::

    boostrap
    npy
    optickscore
    ggeo
    extg4
    CSG_GGeo
    GeoChain
 
As new develpment is needed to replace the geometry translation
that those packages implemnent. 

Long term aiming for something like::

    okconf       # could be eliminated 
    sysrap
    new-"ggeo"
    CSG
    qudarap
    u4
    CSGOptiX
    g4cx
    new-"viz" 




