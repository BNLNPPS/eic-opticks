opticks-t-CSG-fails
======================


Overview
-----------


* CSGCopyTest fail for full geom V1J011 

  * the prim bbox have small shifts on large values 
    (perhaps could special case a fast track when there is no selection, 
    in order to use the origin bbox ?)
  * TODO: check the bbox mechanics is happening in double precision 

 






Issue
--------


V1J011 FAIL (no fail with RaindropRockAirWater)::

    98% tests passed, 1 tests failed out of 42

    Total Test time (real) =  32.54 sec

    The following tests FAILED:
         30 - CSGTest.CSGCopyTest (Subprocess aborted)


    2023-11-04 17:24:29.224 INFO  [131637] [CSGFoundry::CompareVec@494] prim sizeof(T) 64 data_match FAIL 
    2023-11-04 17:24:29.224 INFO  [131637] [CSGFoundry::CompareVec@498] prim sizeof(T) 64 byte_match FAIL 
    2023-11-04 17:24:29.224 FATAL [131637] [CSGFoundry::CompareVec@501]  mismatch FAIL for prim
     mismatch FAIL for prim a.size 3088 b.size 3088
    2023-11-04 17:24:29.224 INFO  [131637] [CSGFoundry::CompareVec@494] node sizeof(T) 64 data_match FAIL 
    2023-11-04 17:24:29.227 INFO  [131637] [CSGFoundry::CompareVec@498] node sizeof(T) 64 byte_match FAIL 
    2023-11-04 17:24:29.227 FATAL [131637] [CSGFoundry::CompareVec@501]  mismatch FAIL for node
     mismatch FAIL for node a.size 15968 b.size 15968
    2023-11-04 17:24:29.238 FATAL [131637] [CSGFoundry::Compare@442]  mismatch FAIL 
    2023-11-04 17:24:29.238 INFO  [131637] [main@33]  src 0xda9d40 dst 0xdaa780 cf 4
    2023-11-04 17:24:29.238 FATAL [131637] [main@41]  UNEXPECTED DIFFERENCE  DEBUG WITH :
     ~/opticks/CSG/tests/CSGCopyTest.sh ana 
    CSGCopyTest: /data/blyth/junotop/opticks/CSG/tests/CSGCopyTest.cc:48: int main(int, char**): Assertion `cf == 0' failed.


::

    CTESTARG="-R CSGCopyTest" om-test


::


    ~/opticks/CSG/tests/CSGCopyTest.sh
    ~/opticks/CSG/tests/CSGCopyTest.sh ana 

    In [3]: np.where(a.node != b.node)
    Out[3]: 
    (array([   27,    28,    29,    30,    31, ..., 15956, 15960, 15962, 15964, 15966]),
     array([2, 2, 2, 2, 2, ..., 2, 3, 2, 3, 2]),
     array([1, 1, 1, 1, 1, ..., 1, 0, 1, 0, 1]))

    In [4]: w = np.where(a.node != b.node)

    In [5]: a.node[w]
    Out[5]: array([-10141.8  , -10096.351, -10141.8  , -10141.8  , -10096.351, ...,    686.45 ,    765.55 ,    765.65 ,    818.35 ,    818.45 ], dtype=float32)

    In [6]: b.node[w]
    Out[6]: array([-10141.801, -10096.35 , -10141.801, -10141.801, -10096.35 , ...,    686.45 ,    765.55 ,    765.65 ,    818.35 ,    818.45 ], dtype=float32)

    In [7]: 


    In [11]: np.where( np.abs( a.node - b.node ) > 1e-3 )
    Out[11]: 
    (array([  222,   223,   229,   230,   236, ..., 15651, 15652, 15653, 15654, 15655]),
     array([3, 3, 3, 3, 3, ..., 2, 2, 2, 2, 2]),
     array([1, 1, 1, 1, 1, ..., 2, 2, 2, 2, 2]))







Investigate CSGCopy prim diffs : all with the bbox
-----------------------------------------------------

The bbox gets recomputed in order to accomodate changes when
a selection is being applied : so some small differences
are not so surprising.

TODO : a more careful comparison in the CSGCopyTest  : checking
relative diffs perhaps for the prim bbox, not equality.

::

    In [3]: np.where( a.prim != b.prim )
    Out[3]:
    (array([  13,   14,   15,   16,   17, ..., 3076, 3080, 3082, 3084, 3086]),
     array([2, 2, 2, 2, 2, ..., 2, 3, 2, 3, 2]),
     array([1, 1, 1, 1, 1, ..., 1, 0, 1, 0, 1]))

    In [4]: np.where( a.prim != b.prim )[0]
    Out[4]: array([  13,   14,   15,   16,   17, ..., 3076, 3080, 3082, 3084, 3086])

    In [5]: np.where( a.prim != b.prim )[0].shape
    Out[5]: (4215,)

    In [6]: a.prim.shape
    Out[6]: (3088, 4, 4)

    In [7]: np.where( a.prim != b.prim )[1].shape
    Out[7]: (4215,)

    In [8]: np.where( a.prim != b.prim )[2].shape
    Out[8]: (4215,)

    In [9]: np.unique( np.where( a.prim != b.prim )[0] )
    Out[9]: array([  13,   14,   15,   16,   17, ..., 3076, 3080, 3082, 3084, 3086])

    In [10]: np.unique( np.where( a.prim != b.prim )[0] ).shape
    Out[10]: (2386,)

::

    In [12]: np.unique( np.where( a.prim != b.prim )[1] )  ## probably the bbox
    Out[12]: array([2, 3])


YEP : the prim bbox differs (that is kinda understandable, but the change should be very small)::

    In [14]: np.unique( np.where( a.prim[:,0] != b.prim[:,0] ) )
    Out[14]: array([], dtype=int64)

    In [15]: np.unique( np.where( a.prim[:,1] != b.prim[:,1] ) )
    Out[15]: array([], dtype=int64)

    In [16]: np.unique( np.where( a.prim[:,2] != b.prim[:,2] ) )
    Out[16]: array([   0,    1,    2,    3,   13, ..., 3066, 3072, 3076, 3082, 3086])

    In [17]: np.unique( np.where( a.prim[:,3] != b.prim[:,3] ) )
    Out[17]: array([   0,    1,   55,   56,   57, ..., 3064, 3070, 3074, 3080, 3084])

    In [18]: np.unique( np.where( a.prim[:,3,2:] != b.prim[:,3,2:] ) )
    Out[18]: array([], dtype=int64)

::

    In [20]: a.prim.reshape(-1,16)[:,8:8+6]
    Out[20]:
    array([[-60000.  , -60000.  , -60000.  ,  60000.  ,  60000.  ,  60000.  ],
           [-28000.  , -27500.  ,  21750.  ,  34250.  ,  27500.  ,  51750.  ],
           [-28000.  , -27500.  ,  32750.  ,  34250.  ,  27500.  ,  51750.  ],
           [-28000.  , -29760.  ,  -7770.  ,  34250.  ,  29760.  ,  51750.  ],
           [-25000.  , -26760.  ,  -4770.  ,  31250.  ,  26760.  ,  48750.  ],
           ...,
           [ -3430.  ,    765.8 ,     -5.  ,   3430.  ,    791.8 ,      5.  ],
           [ -3430.  ,    792.05,     -5.15,   3430.  ,    818.35,      5.15],
           [ -3430.  ,    792.2 ,     -5.  ,   3430.  ,    818.2 ,      5.  ],
           [ -3430.  ,    818.45,     -5.15,   3430.  ,    844.75,      5.15],
           [ -3430.  ,    818.6 ,     -5.  ,   3430.  ,    844.6 ,      5.  ]], dtype=float32)

    In [21]: b.prim.reshape(-1,16)[:,8:8+6]
    Out[21]:
    array([[-60000.  , -60000.  , -60000.  ,  60000.  ,  60000.  ,  60000.  ],
           [-28000.  , -27500.  ,  21750.  ,  34250.  ,  27500.  ,  51750.  ],
           [-28000.  , -27500.  ,  32750.  ,  34250.  ,  27500.  ,  51750.  ],
           [-28000.  , -29760.  ,  -7770.  ,  34250.  ,  29760.  ,  51750.  ],
           [-25000.  , -26760.  ,  -4770.  ,  31250.  ,  26760.  ,  48750.  ],
           ...,
           [ -3430.  ,    765.8 ,     -5.  ,   3430.  ,    791.8 ,      5.  ],
           [ -3430.  ,    792.05,     -5.15,   3430.  ,    818.35,      5.15],
           [ -3430.  ,    792.2 ,     -5.  ,   3430.  ,    818.2 ,      5.  ],
           [ -3430.  ,    818.45,     -5.15,   3430.  ,    844.75,      5.15],
           [ -3430.  ,    818.6 ,     -5.  ,   3430.  ,    844.6 ,      5.  ]], dtype=float32)

::

    In [22]: apbb = a.prim.reshape(-1,16)[:,8:8+6].copy()
    In [23]: bpbb = b.prim.reshape(-1,16)[:,8:8+6].copy()

::

    In [31]: wpbb = np.unique( np.where( np.abs(apbb-bpbb) > 1e-3 )[0] )

    In [32]: apbb[wpbb]
    Out[32]:
    array([[  8369.249,    732.113,  16967.477,  10959.174,   1299.386,  18678.633],
           [  7972.115,   2462.699,  16967.477,  10511.563,   3543.012,  18678.633],
           [  7226.56 ,   4085.654,  16967.477,   9604.548,   5631.791,  18678.633],
           [  6165.17 ,   5530.045,  16967.477,   8277.768,   7474.434,  18678.633],
           [  4834.333,   6732.748,  16967.477,   6589.208,   8990.408,  18678.633],
           ...,
           [  -856.072,  -3895.686, -19234.092,   -720.444,  -3521.239, -17705.57 ],
           [   720.444,  -3895.686, -19234.092,    856.072,  -3521.239, -17705.57 ],
           [  2095.449,  -3234.561, -19234.092,   2361.505,  -2899.91 , -17705.57 ],
           [  3108.132,  -2014.151, -19234.092,   3458.613,  -1777.161, -17705.57 ],
           [  3583.391,   -445.477, -19234.092,   3957.694,   -347.124, -17705.57 ]], dtype=float32)

    In [34]: bpbb[wpbb]
    Out[34]:
    array([[  8369.25 ,    732.113,  16967.477,  10959.174,   1299.386,  18678.63 ],
           [  7972.114,   2462.699,  16967.477,  10511.563,   3543.012,  18678.63 ],
           [  7226.56 ,   4085.654,  16967.477,   9604.548,   5631.791,  18678.63 ],
           [  6165.17 ,   5530.045,  16967.477,   8277.768,   7474.434,  18678.63 ],
           [  4834.333,   6732.748,  16967.477,   6589.209,   8990.408,  18678.63 ],
           ...,
           [  -856.072,  -3895.686, -19234.094,   -720.444,  -3521.239, -17705.57 ],
           [   720.444,  -3895.686, -19234.094,    856.072,  -3521.239, -17705.57 ],
           [  2095.449,  -3234.561, -19234.094,   2361.505,  -2899.91 , -17705.57 ],
           [  3108.132,  -2014.151, -19234.094,   3458.612,  -1777.16 , -17705.57 ],
           [  3583.391,   -445.476, -19234.094,   3957.694,   -347.124, -17705.57 ]], dtype=float32)



    In [33]: apbb[wpbb] - bpbb[wpbb]
    Out[33]:
    array([[-0.001,  0.   ,  0.   ,  0.   , -0.   ,  0.002],
           [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.002],
           [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.002],
           [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.002],
           [-0.   ,  0.   ,  0.   , -0.   ,  0.   ,  0.002],
           ...,
           [ 0.   ,  0.   ,  0.002,  0.   ,  0.   ,  0.   ],
           [ 0.   ,  0.   ,  0.002,  0.   ,  0.   ,  0.   ],
           [ 0.   ,  0.   ,  0.002, -0.   , -0.   ,  0.   ],
           [ 0.   ,  0.   ,  0.002,  0.   , -0.   ,  0.   ],
           [ 0.   , -0.   ,  0.002, -0.   ,  0.   ,  0.   ]], dtype=float32)

    In [35]: (apbb[wpbb] - bpbb[wpbb]).max()
    Out[35]: 0.001953125


Small shifts on large values.



Investigate CSGCopy node diffs : same story : small shifts on large bbox values
---------------------------------------------------------------------------------

::


    In [36]: np.where( a.node[:,0] != b.node[:,0] )
    Out[36]: (array([], dtype=int64), array([], dtype=int64))

    In [37]: np.where( a.node[:,1] != b.node[:,1] )
    Out[37]: (array([], dtype=int64), array([], dtype=int64))

    In [38]: np.where( a.node[:,2] != b.node[:,2] )
    Out[38]:
    (array([   27,    28,    29,    30,    31, ..., 15946, 15952, 15956, 15962, 15966]),
     array([1, 1, 1, 1, 1, ..., 1, 1, 1, 1, 1]))

    In [39]: np.where( a.node[:,3] != b.node[:,3] )
    Out[39]:
    (array([   69,    70,    71,    72,    73, ..., 15944, 15950, 15954, 15960, 15964]),
     array([0, 0, 0, 0, 0, ..., 0, 0, 0, 0, 0]))


    In [40]: anbb = a.node.reshape(-1,16)[:,8:8+6].copy()
    In [41]: bnbb = b.node.reshape(-1,16)[:,8:8+6].copy()

    In [42]: anbb
    Out[42]:
    array([[-60000.  , -60000.  , -60000.  ,  60000.  ,  60000.  ,  60000.  ],
           [-28000.  , -27500.  ,  21750.  ,  34250.  ,  27500.  ,  51750.  ],
           [-28000.  , -27500.  ,  32750.  ,  34250.  ,  27500.  ,  51750.  ],
           [    -0.  ,     -0.  ,     -0.  ,      0.  ,      0.  ,      0.  ],
           [-28000.  , -29760.  ,  -7770.  ,  34250.  ,  29760.  ,  51750.  ],
           ...,
           [ -3430.  ,    765.8 ,     -5.  ,   3430.  ,    791.8 ,      5.  ],
           [ -3430.  ,    792.05,     -5.15,   3430.  ,    818.35,      5.15],
           [ -3430.  ,    792.2 ,     -5.  ,   3430.  ,    818.2 ,      5.  ],
           [ -3430.  ,    818.45,     -5.15,   3430.  ,    844.75,      5.15],
           [ -3430.  ,    818.6 ,     -5.  ,   3430.  ,    844.6 ,      5.  ]], dtype=float32)

    In [43]: bnbb
    Out[43]:
    array([[-60000.  , -60000.  , -60000.  ,  60000.  ,  60000.  ,  60000.  ],
           [-28000.  , -27500.  ,  21750.  ,  34250.  ,  27500.  ,  51750.  ],
           [-28000.  , -27500.  ,  32750.  ,  34250.  ,  27500.  ,  51750.  ],
           [    -0.  ,     -0.  ,     -0.  ,      0.  ,      0.  ,      0.  ],
           [-28000.  , -29760.  ,  -7770.  ,  34250.  ,  29760.  ,  51750.  ],
           ...,
           [ -3430.  ,    765.8 ,     -5.  ,   3430.  ,    791.8 ,      5.  ],
           [ -3430.  ,    792.05,     -5.15,   3430.  ,    818.35,      5.15],
           [ -3430.  ,    792.2 ,     -5.  ,   3430.  ,    818.2 ,      5.  ],
           [ -3430.  ,    818.45,     -5.15,   3430.  ,    844.75,      5.15],
           [ -3430.  ,    818.6 ,     -5.  ,   3430.  ,    844.6 ,      5.  ]], dtype=float32)


    In [44]: wnbb = np.unique( np.where( np.abs(anbb-bnbb) > 1e-3 )[0] )

    In [45]: wnbb
    Out[45]: array([  222,   223,   229,   230,   236, ..., 15651, 15652, 15653, 15654, 15655])

    In [46]: anbb[wnbb]
    Out[46]:
    array([[  1865.107,    600.906,  19683.473,   3908.886,   1275.178,  20460.037],
           [  1818.333,    463.214,  19667.652,   3886.827,   1390.504,  19997.299],
           [  1148.991,   1584.605,  19683.473,   2419.532,   3327.046,  20460.037],
           [  1031.086,   1498.028,  19667.652,   2494.896,   3355.071,  19997.299],
           [    -6.   ,   1963.039,  19683.473,      6.   ,   4108.096,  20460.037],
           ...,
           [  -856.072,  -3895.686, -19234.092,   -720.444,  -3521.239, -17705.57 ],
           [   720.444,  -3895.686, -19234.092,    856.072,  -3521.239, -17705.57 ],
           [  2095.449,  -3234.561, -19234.092,   2361.505,  -2899.91 , -17705.57 ],
           [  3108.132,  -2014.151, -19234.092,   3458.613,  -1777.161, -17705.57 ],
           [  3583.391,   -445.477, -19234.092,   3957.694,   -347.124, -17705.57 ]], dtype=float32)

    In [47]: bnbb[wnbb]
    Out[47]:
    array([[  1865.107,    600.906,  19683.473,   3908.886,   1275.178,  20460.035],
           [  1818.333,    463.214,  19667.652,   3886.827,   1390.504,  19997.297],
           [  1148.991,   1584.605,  19683.473,   2419.533,   3327.046,  20460.035],
           [  1031.086,   1498.028,  19667.652,   2494.896,   3355.071,  19997.297],
           [    -6.   ,   1963.039,  19683.473,      6.   ,   4108.096,  20460.035],
           ...,
           [  -856.072,  -3895.686, -19234.094,   -720.444,  -3521.239, -17705.57 ],
           [   720.444,  -3895.686, -19234.094,    856.072,  -3521.239, -17705.57 ],
           [  2095.449,  -3234.561, -19234.094,   2361.505,  -2899.91 , -17705.57 ],
           [  3108.132,  -2014.151, -19234.094,   3458.612,  -1777.16 , -17705.57 ],
           [  3583.391,   -445.476, -19234.094,   3957.694,   -347.124, -17705.57 ]], dtype=float32)

    In [48]: anbb[wnbb]-bnbb[wnbb]
    Out[48]:
    array([[ 0.   ,  0.   ,  0.   , -0.   ,  0.   ,  0.002],
           [ 0.   ,  0.   ,  0.   , -0.   ,  0.   ,  0.002],
           [ 0.   ,  0.   ,  0.   , -0.   ,  0.   ,  0.002],
           [ 0.   ,  0.   ,  0.   , -0.   ,  0.   ,  0.002],
           [ 0.   ,  0.   ,  0.   ,  0.   ,  0.   ,  0.002],
           ...,
           [ 0.   ,  0.   ,  0.002,  0.   ,  0.   ,  0.   ],
           [ 0.   ,  0.   ,  0.002,  0.   ,  0.   ,  0.   ],
           [ 0.   ,  0.   ,  0.002, -0.   , -0.   ,  0.   ],
           [ 0.   ,  0.   ,  0.002,  0.   , -0.   ,  0.   ],
           [ 0.   , -0.   ,  0.002, -0.   ,  0.   ,  0.   ]], dtype=float32)

    In [49]: (anbb[wnbb]-bnbb[wnbb]).max()
    Out[49]: 0.001953125





