
#ifdef OLD_ASIRAP
// asirap
#include "AssimpGGeo.hh"
#endif


#ifdef OLD_MESHFIX
// openmeshrap-
#include "MFixer.hh"
#include "MTool.hh"
#endif



/**
OpticksGeometry::loadGeometryBase
------------------------------------

**/


void OpticksGeometry::loadGeometryBase()
{
    LOG(LEVEL) << "[" ; 

    if(m_ok->hasOpt("qe1"))
        m_ggeo->getSurfaceLib()->setFakeEfficiency(1.0);

#ifdef OLD_ASIRAP
    m_ggeo->setLoaderImp(&AssimpGGeo::load);    // setting GLoaderImpFunctionPtr
#endif

#ifdef OLD_MESHFIX
    OpticksResource* resource = m_ok->getResource();
    m_ggeo->setMeshJoinImp(&MTool::joinSplitUnion);
    m_ggeo->setMeshVerbosity(m_ok->getMeshVerbosity());    
    m_ggeo->setMeshJoinCfg( resource->getMeshfix() );

    std::string meshversion = m_fcfg->getMeshVersion() ;;
    if(!meshversion.empty())
    {
        LOG(error) << "using debug meshversion " << meshversion ;  
        m_ggeo->getGeoLib()->setMeshVersion(meshversion.c_str());
    }
#endif

    m_ggeo->loadGeometry();   // potentially from cache : for gltf > 0 loads both tri and ana geometry 
      
  
#ifdef OLD_MESHFIX
    if(m_ggeo->getMeshVerbosity() > 2)
    {
        GMergedMesh* mesh1 = m_ggeo->getMergedMesh(1);
        if(mesh1)
        {
            mesh1->dumpVolumes("OpticksGeometry::loadGeometryBase mesh1");
            mesh1->save("$TMP", "GMergedMesh", "baseGeometry") ;
        }
    }
#endif

    LOG(LEVEL) << "]" ; 
}


#ifdef OLD_MESHFIX
void OpticksGeometry::fixGeometry()
{
    if(m_ggeo->isLoadedFromCache())
    {
        LOG(debug) << "needs to be done precache " ;
        return ; 
    }
    LOG(info) << "[" ; 

    MFixer* fixer = new MFixer(m_ggeo);
    fixer->setVerbose(m_ok->hasOpt("meshfixdbg"));
    fixer->fixMesh();
 
    bool zexplode = m_ok->hasOpt("zexplode");
    if(zexplode)
    {
       // for --jdyb --idyb --kdyb testing : making the cleave OR the mend obvious
        glm::vec4 zexplodeconfig = gvec4(m_fcfg->getZExplodeConfig());
        print(zexplodeconfig, "zexplodeconfig");

        GMergedMesh* mesh0 = m_ggeo->getMergedMesh(0);  // mesh0-ok
        mesh0->explodeZVertices(zexplodeconfig.y, zexplodeconfig.x );  // mesh0-ok
    }

    LOG(info) << "]" ; 
}
#endif


