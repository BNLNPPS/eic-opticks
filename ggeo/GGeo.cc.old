const char* GGeo::CATHODE_MATERIAL = "Bialkali" ; 







#define WITH_LEGACY_G4DAE 1 

void GGeo::loadGeometry()
{
    int gltf = m_ok->getGLTF(); 

    LOG(LEVEL)
        << "["
        << " m_loaded_from_cache " << m_loaded_from_cache 
        << " gltf " << gltf
        ; 

    if(!m_loaded_from_cache)
    {
#ifdef WITH_LEGACY_G4DAE
        if(m_enabled_legacy_g4dae)
        {
            loadFromG4DAE();
            save();

            if(gltf > 0 && gltf < 10) 
            {
                assert(0); 
#ifdef OLD_GEOM
                loadAnalyticFromGLTF();
                saveAnalytic();
#endif
            }
        }
        else
#endif
        {
            LOG(fatal) 
               << "MISSING geocache : create one from GDML with geocache-;geocache-create " ; 
            assert(0);  
        } 
    }
    else
    {
        loadFromCache();

        if(gltf > 0 && gltf < 10)  
        {
            assert(0); 
#ifdef OLD_GEOM
            loadAnalyticFromCache(); 
#endif
        }
    } 


    if(m_ok->isAnalyticPMTLoad())
    {
        m_pmtlib = GPmtLib::load(m_ok, m_bndlib );
    }

    if( gltf >= 10 )
    {
        LOG(fatal) << "GGeo::loadGeometry DEBUGGING loadAnalyticFromGLTF " ; 
        assert(0); 
#ifdef OLD_GEOM
        loadAnalyticFromGLTF();
#endif
    }


    // HMM : this not done in direct route ?
    setupLookup();
    setupColors();
    setupTyp();

    LOG(LEVEL) << "]" ; 
}



void GGeo::loadFromG4DAE()
{
    LOG(error) << "GGeo::loadFromG4DAE START" ; 

    int rc = (*m_loader_imp)(this);   //  imp set in OpticksGeometry::loadGeometryBase, m_ggeo->setLoaderImp(&AssimpGGeo::load); 

    if(rc != 0)
        LOG(fatal) << "GGeo::loadFromG4DAE"
                   << " FAILED : probably you need to download opticksdata "
                   ;

    assert(rc == 0 && "G4DAE geometry file does not exist, try : opticksdata- ; opticksdata-- ") ;

    prepare();

    LOG(error) << "GGeo::loadFromG4DAE DONE" ; 
}



#ifdef OLD_GEOM
/**
GGeo::loadAnalyticFromGLTF
----------------------------

This is invoked by GGeo::loadGeometry in precache mode 
resulting in the loading of GScene from the transport GLTF,
that is created by the gdml2gltf python script.

**/

void GGeo::loadAnalyticFromGLTF()
{
    LOG(LEVEL) << "[" ; 
    if(!m_ok->isGLTF()) 
    {
        LOG(LEVEL) << " skip loading GScene as not GLTF enabled ( needs --gltf N where N > 0 )  " ; 
        return ; 
    }

#ifdef OPTICKS_YoctoGL
    m_gscene = GScene::Create(m_ok, this); 
#else
    LOG(fatal) << "requires YoctoGL external " ; 
    assert(0);
#endif

    LOG(LEVEL) << "]" ; 
}


void GGeo::saveAnalytic()
{ 
    LOG(LEVEL) ;
    m_gscene->save();   // HUH: still needed ???   THIS IS VESTIGIAL SURELY 
}

#endif


#ifdef OLD_GEOM
void GGeo::loadAnalyticFromCache()
{
    //assert(0) ; // THIS IS THE OLD WAY ? YES : USED BY GSceneTest
    LOG(info) << "[" ; 
    m_gscene = GScene::Load(m_ok, this); // GGeo needed for m_bndlib 
    LOG(info) << "]" ; 
}
#endif






#ifdef OLD_CATHODE
/**
GGeo::setCathode
------------------

Invoked from AssimpGGeo::convertMaterials

**/
void GGeo::setCathode(GMaterial* cathode)
{
    m_materiallib->setCathode(cathode); 
}
GMaterial* GGeo::getCathode() const 
{
    return m_materiallib->getCathode() ; 
}
const char* GGeo::getCathodeMaterialName() const
{
    return m_materiallib->getCathodeMaterialName() ; 
}

#endif



#ifdef OLD_SENSOR

/**
GGeo::addLVSD
-------------------

From  

1. AssimpGGeo::convertSensorsVisit
2. X4PhysicalVolume::convertSensors_r


Issues/TODO
~~~~~~~~~~~~~~

* integrate sensor setup with the material properties, 
  see GMaterialLib::setCathode, GGeoSensor::AddSensorSurfaces


**/

void GGeo::addLVSDMT(const char* lv, const char* sd, const char* mt)
{
   assert( lv ) ;  
   m_cathode_lv.insert(lv);


   if(sd) 
   {
       assert(mt);
       if(m_lv2sd == NULL ) m_lv2sd = new NMeta ; 
       m_lv2sd->set<std::string>(lv, sd) ; 
   }

   if(mt) 
   {
       assert(sd);
       if(m_lv2mt == NULL ) m_lv2mt = new NMeta ; 
       m_lv2mt->set<std::string>(lv, mt) ; 
   }
}
unsigned GGeo::getNumLVSD() const
{
   return m_lv2sd ? m_lv2sd->getNumKeys() : 0 ;  
}
unsigned GGeo::getNumLVMT() const
{
   return m_lv2mt ? m_lv2mt->getNumKeys() : 0 ;  
}


std::pair<std::string,std::string> GGeo::getSDMT(const char* lv) const
{
    std::string sd = m_lv2sd->get<std::string>(lv); 
    std::string mt = m_lv2mt->get<std::string>(lv); 
    return std::pair<std::string,std::string>( lv, mt ); 
}

std::pair<std::string,std::string> GGeo::getLVSD(unsigned idx) const
{
    unsigned nk = m_lv2sd->getNumKeys();
    assert( idx < nk ); 
    const char* lv = m_lv2sd->getKey(idx) ; 
    std::string sd = m_lv2sd->get<std::string>(lv); 
    return std::pair<std::string,std::string>( lv, sd ); 
}

std::pair<std::string,std::string> GGeo::getLVMT(unsigned idx) const
{
    unsigned nk = m_lv2mt->getNumKeys();
    assert( idx < nk ); 
    const char* lv = m_lv2mt->getKey(idx) ; 
    std::string mt = m_lv2mt->get<std::string>(lv); 
    return std::pair<std::string,std::string>( lv, mt ); 
}

int GGeo::findCathodeLVIndex(const char* lv) const  // -1 if not found
{
    int index = -1 ; 
    if( lv == NULL ) return index ; 


    typedef std::unordered_set<std::string>::const_iterator UCI ; 
    UCI b = m_cathode_lv.begin() ;
    UCI e = m_cathode_lv.end() ;

    for(UCI it=b ; it != e ; it++)
    {
        const char* clv = it->c_str(); 
        if( strcmp( clv, lv) == 0)
        {
            index = std::distance( b, it ) ; 
            break ; 
        }
    }

    if( index > -1 )
    {
        const char* clv2 = getCathodeLV(index); 
        assert( strcmp(lv, clv2) == 0 ) ;  
    }

    return index ; 
}



unsigned int GGeo::getNumCathodeLV() const 
{
   return m_cathode_lv.size() ; 
}
const char* GGeo::getCathodeLV(unsigned int index) const 
{
    typedef std::unordered_set<std::string>::const_iterator UCI ; 
    UCI it = m_cathode_lv.begin() ; 
    std::advance( it, index );
    return it != m_cathode_lv.end() ? it->c_str() : NULL  ; 
}

void GGeo::dumpCathodeLV(const char* msg) const 
{
    //printf("%s\n", msg);
    LOG(LEVEL) << msg ; 

    typedef std::unordered_set<std::string>::const_iterator UCI ; 
    for(UCI it=m_cathode_lv.begin() ; it != m_cathode_lv.end() ; it++)
    {
        //printf("GGeo::dumpCathodeLV %s \n", it->c_str() ); 
        LOG(LEVEL) << it->c_str() ;  
    }
}
 
void GGeo::getCathodeLV( std::vector<std::string>& lvnames ) const 
{
    typedef std::unordered_set<std::string>::const_iterator UCI ; 
    for(UCI it=m_cathode_lv.begin() ; it != m_cathode_lv.end() ; it++) 
         lvnames.push_back(*it) ; 
}


void GGeo::getSensitiveLVSDMT( std::vector<std::string>& lvn, std::vector<std::string>& sdn, std::vector<std::string>& mtn ) const 
{
    typedef std::unordered_set<std::string>::const_iterator UCI ; 
    for(UCI it=m_cathode_lv.begin() ; it != m_cathode_lv.end() ; it++) 
       lvn.push_back(*it) ; 

    typedef std::pair<std::string,std::string> PSS ; 

    for(unsigned i=0 ; i < lvn.size() ; i++)
    {
        const char* lv = lvn[i].c_str();
        PSS sdmt = getSDMT(lv);

        const char* sd = sdmt.first.c_str();  
        const char* mt = sdmt.second.c_str();  
    
        sdn.push_back(sd);   
        mtn.push_back(mt);   

        LOG(LEVEL)
            << " idx " << i
            << " lv " << lv 
            << " sd " << sd 
            << " mt " << mt
            ;  
    }
}

#endif



