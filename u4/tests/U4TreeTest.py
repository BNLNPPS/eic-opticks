#!/usr/bin/env python 
"""
U4TreeTest.py
=================


Dumping siblings which all have same parent::

    n[np.where( n[:,3] == 65724 )[0]]  


    In [7]: n[np.where( n[:,3] == 65724 )[0]]
    Out[7]: 
    array([[ 65725,      4,      0,  65724,      0,     -1,  65726,     18],
           [ 65726,      4,      1,  65724,      0,     -1,  65727,     18],
           [ 65727,      4,      2,  65724,      0,     -1,  65728,     18],
           [ 65728,      4,      3,  65724,      0,     -1,  65729,     18],
           [ 65729,      4,      4,  65724,      0,     -1,  65730,     18],
           ...,
           [336623,      4,   4516,  65724,      2, 336624, 336629,    134],
           [336629,      4,   4517,  65724,      2, 336630, 336635,    134],
           [336635,      4,   4518,  65724,      2, 336636, 336641,    134],
           [336641,      4,   4519,  65724,      2, 336642, 336647,    134],
           [336647,      4,   4520,  65724,      2, 336648,     -1,    134]], dtype=int32)

    In [8]: n[np.where( n[:,3] == 65724 )[0]][:,-1]
    Out[8]: array([ 18,  18,  18,  18,  18, ..., 134, 134, 134, 134, 134], dtype=int32)

    In [9]: np.unique(n[np.where( n[:,3] == 65724 )[0]][:,-1], return_counts=True)                                                                                                                        
    Out[9]:
    (array([ 18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
             56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89, 128, 134], dtype=int32),
     array([  10,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   10,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
              30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
              30,   30,   30,   30,   30,   30,   30,   30,    1, 2400]))

    In [10]: s[18]
    Out[10]: 'GLw1.up10_up11_FlangeI_Web_FlangeII0x57931d0'

    In [11]: s[19]
    Out[11]: 'GLw1.up09_up10_FlangeI_Web_FlangeII0x5794550'

    In [12]: s[89]
    Out[12]: 'ZC2.A05_A05_FlangeI_Web_FlangeII0x57c3d70'

    In [13]: s[128]
    Out[13]: 'sReflectorInCD0x58289b0'

    In [14]: s[134]
    Out[14]: 'mask_PMT_20inch_vetosMask_virtual0x5f62e40'


"""

import numpy as np
from opticks.ana.fold import Fold


if __name__ == '__main__':
    t = Fold.Load()
    print(repr(t))
    print("index, depth, sibdex, parent, num_child, first_child, next_sibling, lvid ")

    n = t.nds
    s = t.soname



