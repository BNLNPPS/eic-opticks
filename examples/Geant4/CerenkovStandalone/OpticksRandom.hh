#pragma once

#include "CLHEP/Random/RandomEngine.h"

struct NP ; 

/**
OpticksRandom
==============

Controlling the random sequence returned by G4UniformRand using 
precooked array of randoms generated by curand 
(based on extracts from cfg4/CAlignEngine.cc)

Primary control *OpticksRandom::setSequenceIndex* 
to set the photon_id sequence of randoms to consume from  
and then use *G4UniformRand* as normal which will internally use the 
below *OpticksRandom::flat* method while this is enabled.

The idea is to control the random stream separately for each photon slot. 

**/

struct OpticksRandom : public CLHEP::HepRandomEngine
{
    friend struct OpticksRandomTest ; 
    static const char* NAME ; 
    static OpticksRandom* INSTANCE ; 
    static OpticksRandom* Get(); 
    static bool           Enabled(); 

    const char*              m_seqpath ; 
    const NP*                m_seq;  
    const float*             m_seq_values ; 
    int                      m_seq_ni ; 
    int                      m_seq_nv ; 

    int                      m_seq_index ; 

    NP*                      m_cur ; 
    int*                     m_cur_values ; 
    bool                     m_recycle ; 

    CLHEP::HepRandomEngine*  m_default ;


    const NP*                m_seqmask ; 
    int                      m_seqmask_ni ; 
    const size_t*            m_seqmask_values ; 
 
    bool                     m_flat_debug ; 
    double                   m_flat_prior ; 


    static void SetSeed(long seed) ;  // non-zero seed required 

    static const char* OPTICKS_RANDOM_SEQPATH ; 
    OpticksRandom(const char* seq_path=nullptr, const char* seqmask_path=nullptr); 

    virtual ~OpticksRandom(); 

    size_t getNumIndices() const ;
    size_t getMaskedIndex(int index_);
    void setSequenceIndex(int index_);  
    int  getSequenceIndex() const ;

    double getFlatPrior() const ; 


    // mandatory CLHEP::HepRandomEngine methods
    double flat();
    void flatArray(const int size, double* vect);
    void setSeed(long seed, int);
    void setSeeds(const long * seeds, int); 
    void saveStatus( const char filename[] = "Config.conf") const ;
    void restoreStatus( const char filename[] = "Config.conf" ) ;
    void showStatus() const ;
    std::string name() const ;

    void dump(unsigned n=10); 
    // internals
    private:
        std::string desc() const ; 
        void enable(); 
        void disable(); 


}; 

